# Generated by Django 4.1.4 on 2023-01-29 09:10

import core.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_name', models.CharField(max_length=50, verbose_name='Course_Name')),
                ('course_img', models.ImageField(default='course.png', upload_to='Course_image_upload')),
                ('course_created_at', models.DateTimeField(auto_now_add=True)),
                ('course_updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
            },
        ),
        migrations.CreateModel(
            name='DiagnosisMedical',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diagnosis_date', models.DateTimeField(blank=True, null=True)),
                ('patient_chart', models.CharField(blank=True, max_length=100, null=True, verbose_name='Patient Chart')),
                ('patient_xray', models.ImageField(blank=True, null=True, upload_to='Patient_Xray_upload')),
                ('diagnosis_status', models.CharField(choices=[('0', 'Created'), ('1', 'ReservedByPatient'), ('2', 'CancelledByPatient'), ('3', 'CancelledByProfessor'), ('4', 'FinsishedByProfessor')], default=('0', 'Created'), max_length=256, verbose_name='Diagnosis Status')),
                ('diagnosis_course', models.ManyToManyField(blank=True, to='core.course', verbose_name='Diagnosis Course')),
            ],
            options={
                'verbose_name': 'diagnosis',
                'verbose_name_plural': 'diagnosises',
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient_created_at', models.DateTimeField(auto_now_add=True)),
                ('patient_updated_at', models.DateTimeField(auto_now=True)),
                ('patient_user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Patient',
                'verbose_name_plural': 'Patients',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_created_at', models.DateTimeField(auto_now_add=True)),
                ('student_updated_at', models.DateTimeField(auto_now=True)),
                ('student_user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
            },
        ),
        migrations.CreateModel(
            name='TreatmentMedical',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('treatment_date', models.DateTimeField(blank=True, null=True)),
                ('treatment_status', models.CharField(choices=[('0', 'Created'), ('1', 'ReservedByStudent'), ('2', 'CancelledByPatient'), ('3', 'PendingByPatient'), ('4', 'CancelledByStudent'), ('5', 'FinsishedByStudent')], default=('0', 'Created'), max_length=256, verbose_name='Treatment Status')),
                ('treatment_course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.course', verbose_name='Treatment Course')),
                ('treatment_diagnosis', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.diagnosismedical', verbose_name='Treatment Diagnosis')),
                ('treatment_patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.patient', verbose_name='Treatment Patient')),
                ('treatment_student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.student', verbose_name='Treatment Student')),
            ],
            options={
                'verbose_name': 'treatment',
                'verbose_name_plural': 'treatments',
            },
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prof_created_at', models.DateTimeField(auto_now_add=True)),
                ('prof_updated_at', models.DateTimeField(auto_now=True)),
                ('prof_user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Professor',
                'verbose_name_plural': 'Professors',
            },
        ),
        migrations.CreateModel(
            name='LogbookMedical',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logbook_date_Submitted', models.DateTimeField(blank=True, null=True)),
                ('logbook_status', models.CharField(choices=[('0', 'Created'), ('1', 'SubmittedByStudent'), ('2', 'ApprovedByProfessor')], default=('0', 'Created'), max_length=256, verbose_name='Logbook Status')),
                ('logbook_date_Approved', models.DateTimeField(blank=True, null=True)),
                ('logbook_report', models.FileField(blank=True, upload_to=core.models.logbook_report_upload, verbose_name='LogBook Report')),
                ('logbook_course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.course', verbose_name='LogBook Course')),
                ('logbook_patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.patient', verbose_name='Logbook Patient')),
                ('logbook_professor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.professor', verbose_name='Logbook Professor')),
                ('logbook_student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.student', verbose_name='Logbook Student')),
                ('logbook_treatment', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.treatmentmedical', verbose_name='Logbook Treatment ')),
            ],
            options={
                'verbose_name': 'Logbook',
                'verbose_name_plural': 'Logbooks',
            },
        ),
        migrations.AddField(
            model_name='diagnosismedical',
            name='diagnosis_patient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.patient', verbose_name='Diagnosis Patient'),
        ),
        migrations.AddField(
            model_name='diagnosismedical',
            name='diagnosis_professor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.professor', verbose_name='Diagnosis Professor'),
        ),
        migrations.AddField(
            model_name='course',
            name='course_professors',
            field=models.ManyToManyField(blank=True, to='core.professor', verbose_name='Course Professors'),
        ),
        migrations.AddField(
            model_name='course',
            name='course_students',
            field=models.ManyToManyField(blank=True, to='core.student', verbose_name='course students'),
        ),
    ]
